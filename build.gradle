buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5'
  }
}

group 'info.jdavid.stats.monitor'
version '1.0'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  jcenter()
//  maven {
//    url 'http://dl.bintray.com/programingjd/maven'
//  }
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.5'
  compile 'info.jdavid.ok.json:okjson:2.6.2'
  compile 'info.jdavid.ok.rest:okrest:2.6.2'
  testCompile group: 'junit', name: 'junit', version: '4.12'
}

jacoco {
  reportsDir = file("$buildDir/jacoco/reports")
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
  }
}

test {
  jacoco {
    append = false
    destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    classDumpFile = file("$buildDir/jacoco/classpathdumps")
  }
  systemProperty 'https.proptocols', 'TLSv1.2'
}

task groovydocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar, groovydocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact groovydocJar
    }
  }
  repositories {
    maven {
      url "$buildDir/repo"
    }
  }
}


bintray {
  user = 'programingjd'
  key = getBintrayApiKey()
  dryRun = false
  publish = true
  publications = ['mavenJava']
  pkg {
    repo = 'maven'
    name = 'info.jdavid.stats.monitor'
    websiteUrl = 'https://github.com/programingjd/stats_monitor'
    issueTrackerUrl = 'https://github.com/programingjd/stats_monitor/issues'
    vcsUrl = 'https://github.com/programingjd/stats_monitor.git'
    licenses = ['Apache-2.0']
    labels = ['stats','monitor','highstock']
    publicDownloadNumbers = true
    version {
      name = project.version
      mavenCentralSync {
        sync = false
      }
    }
  }
}

def getBintrayApiKey() {
  def f = new File("$projectDir/local.properties")
  f.text.splitEachLine('=', { if (it && it[0] == 'bintrayApiKey') return it[1] })
}
