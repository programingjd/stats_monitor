buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5'
    classpath 'org.jsoup:jsoup:1.8.3'
  }
}

group 'info.jdavid.stats.monitor'
version '2.0.0'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  jcenter()
//  maven {
//    url 'http://dl.bintray.com/programingjd/maven'
//  }
}

configurations {
  samplesCompile.extendsFrom compile
  samplesRuntime.extendsFrom runtime
}

sourceSets {
  samples {
    groovy {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/samples/groovy')
    }
  }
}

task runSystemStatServer(dependsOn: 'samplesClasses', type: JavaExec) {
  main = 'info.jdavid.server.stats.samples.StatServer'
  classpath = sourceSets.samples.runtimeClasspath
  logging.captureStandardOutput LogLevel.LIFECYCLE
  logging.captureStandardError  LogLevel.ERROR
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.5'
  compile 'info.jdavid.ok.json:okjson:3.0.0'
  compile 'info.jdavid.ok.rest:okrest:3.0.0'
  samplesCompile 'com.squareup.okhttp3:okhttp:3.0.0-RC1'
  testCompile 'junit:junit:4.12'
}

test {
  doLast {
    File html = reports.html.entryPoint
    def doc = org.jsoup.Jsoup.parse(html, 'UTF-8')

    def readme = file('README.md')
    def badge = { String label, String text, String color ->
      "https://img.shields.io/badge/_${label}_-_${text}-${color}.png?style=flat"
    }
    String v = project.version
    def download =
      "https://bintray.com/artifact/download/programingjd/maven/info/jdavid/" +
      "stats/monitor/stats_monitor/$v/stats_monitor-${v}.jar"
    readme.readLines().withIndex().collect { line, i ->
      switch (i) {
        case 0:
          return "![jcenter](${badge('jcenter',v,'6688ff')})"
        case 21: return "[Download](${download}) the latest jar."
        case 31: return "  <version>${v}</version>"
        case 44: return "  compile 'info.jdavid.stats.monitor:stats_monitor:${v}'"
        default: return line
      }
    }.join('\n').with { readme.text = it }
  }
}

task groovydocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar, groovydocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact groovydocJar
    }
  }
  repositories {
    maven {
      url "$buildDir/repo"
    }
  }
}


bintray {
  user = 'programingjd'
  key = getBintrayApiKey()
  dryRun = false
  publish = true
  publications = ['mavenJava']
  pkg {
    repo = 'maven'
    name = 'info.jdavid.stats.monitor'
    websiteUrl = 'https://github.com/programingjd/stats_monitor'
    issueTrackerUrl = 'https://github.com/programingjd/stats_monitor/issues'
    vcsUrl = 'https://github.com/programingjd/stats_monitor.git'
    licenses = ['Apache-2.0']
    labels = ['stats','monitor','highstock']
    publicDownloadNumbers = true
    version {
      name = project.version
      mavenCentralSync {
        sync = false
      }
    }
  }
}

tasks.bintrayUpload.dependsOn tasks.check

def getBintrayApiKey() {
  def f = new File("$projectDir/local.properties")
  f.text.splitEachLine('=', { if (it && it[0] == 'bintrayApiKey') return it[1] })
}
